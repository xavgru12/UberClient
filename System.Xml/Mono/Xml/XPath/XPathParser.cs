// Decompiled with JetBrains decompiler
// Type: Mono.Xml.XPath.XPathParser
// Assembly: System.Xml, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
// MVID: A6093E4D-5C47-4D02-9BF3-E0EBDD0B6ACE
// Assembly location: C:\Program Files (x86)\Steam\steamapps\common\UberStrike_v4-3-10\UberStrike_Data\Managed\System.Xml.dll

using Mono.Xml.XPath.yydebug;
using Mono.Xml.XPath.yyParser;
using System;
using System.Collections;
using System.IO;
using System.Xml;
using System.Xml.XPath;
using System.Xml.Xsl;

namespace Mono.Xml.XPath
{
  internal class XPathParser
  {
    internal IStaticXsltContext Context;
    private static int yacc_verbose_flag;
    public TextWriter ErrorOutput = Console.Out;
    public int eof_token;
    internal yyDebug debug;
    protected static int yyFinal = 25;
    protected static string[] yyNames = new string[334]
    {
      "end-of-file",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "'$'",
      null,
      null,
      null,
      "'('",
      "')'",
      "'*'",
      "'+'",
      "','",
      "'-'",
      "'.'",
      "'/'",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "'<'",
      "'='",
      "'>'",
      null,
      "'@'",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "'['",
      null,
      "']'",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "'|'",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "ERROR",
      "EOF",
      "SLASH",
      "SLASH2",
      "\"//\"",
      "DOT",
      "DOT2",
      "\"..\"",
      "COLON2",
      "\"::\"",
      "COMMA",
      "AT",
      "FUNCTION_NAME",
      "BRACKET_OPEN",
      "BRACKET_CLOSE",
      "PAREN_OPEN",
      "PAREN_CLOSE",
      "AND",
      "\"and\"",
      "OR",
      "\"or\"",
      "DIV",
      "\"div\"",
      "MOD",
      "\"mod\"",
      "PLUS",
      "MINUS",
      "ASTERISK",
      "DOLLAR",
      "BAR",
      "EQ",
      "NE",
      "\"!=\"",
      "LE",
      "\"<=\"",
      "GE",
      "\">=\"",
      "LT",
      "GT",
      "ANCESTOR",
      "\"ancestor\"",
      "ANCESTOR_OR_SELF",
      "\"ancstor-or-self\"",
      "ATTRIBUTE",
      "\"attribute\"",
      "CHILD",
      "\"child\"",
      "DESCENDANT",
      "\"descendant\"",
      "DESCENDANT_OR_SELF",
      "\"descendant-or-self\"",
      "FOLLOWING",
      "\"following\"",
      "FOLLOWING_SIBLING",
      "\"sibling\"",
      "NAMESPACE",
      "\"NameSpace\"",
      "PARENT",
      "\"parent\"",
      "PRECEDING",
      "\"preceding\"",
      "PRECEDING_SIBLING",
      "\"preceding-sibling\"",
      "SELF",
      "\"self\"",
      "COMMENT",
      "\"comment\"",
      "TEXT",
      "\"text\"",
      "PROCESSING_INSTRUCTION",
      "\"processing-instruction\"",
      "NODE",
      "\"node\"",
      "MULTIPLY",
      "NUMBER",
      "LITERAL",
      "QName"
    };
    private int yyExpectingState;
    protected int yyMax;
    private static short[] yyLhs = new short[104]
    {
      (short) -1,
      (short) 1,
      (short) 1,
      (short) 2,
      (short) 2,
      (short) 2,
      (short) 2,
      (short) 2,
      (short) 2,
      (short) 2,
      (short) 4,
      (short) 4,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 5,
      (short) 6,
      (short) 6,
      (short) 6,
      (short) 8,
      (short) 8,
      (short) 0,
      (short) 11,
      (short) 11,
      (short) 12,
      (short) 12,
      (short) 13,
      (short) 13,
      (short) 13,
      (short) 14,
      (short) 14,
      (short) 14,
      (short) 14,
      (short) 14,
      (short) 15,
      (short) 15,
      (short) 15,
      (short) 16,
      (short) 16,
      (short) 16,
      (short) 16,
      (short) 17,
      (short) 17,
      (short) 18,
      (short) 18,
      (short) 19,
      (short) 19,
      (short) 19,
      (short) 19,
      (short) 20,
      (short) 20,
      (short) 23,
      (short) 23,
      (short) 23,
      (short) 22,
      (short) 22,
      (short) 22,
      (short) 24,
      (short) 24,
      (short) 7,
      (short) 7,
      (short) 7,
      (short) 27,
      (short) 27,
      (short) 26,
      (short) 26,
      (short) 8,
      (short) 8,
      (short) 25,
      (short) 25,
      (short) 9,
      (short) 9,
      (short) 28,
      (short) 28,
      (short) 28,
      (short) 28,
      (short) 21,
      (short) 21,
      (short) 31,
      (short) 31,
      (short) 31,
      (short) 31,
      (short) 31,
      (short) 32,
      (short) 33,
      (short) 33,
      (short) 34,
      (short) 34,
      (short) 10,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 30,
      (short) 29,
      (short) 29
    };
    private static short[] yyLen = new short[104]
    {
      (short) 2,
      (short) 1,
      (short) 3,
      (short) 1,
      (short) 2,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 2,
      (short) 1,
      (short) 4,
      (short) 6,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 2,
      (short) 2,
      (short) 0,
      (short) 2,
      (short) 1,
      (short) 1,
      (short) 3,
      (short) 1,
      (short) 3,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 2,
      (short) 1,
      (short) 3,
      (short) 1,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 2,
      (short) 2,
      (short) 1,
      (short) 3,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 1,
      (short) 3,
      (short) 4,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 0,
      (short) 2,
      (short) 2,
      (short) 1,
      (short) 0,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 2,
      (short) 2,
      (short) 3,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 4,
      (short) 0,
      (short) 2,
      (short) 0,
      (short) 3,
      (short) 3,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 1,
      (short) 0,
      (short) 1
    };
    private static short[] yyDefRed = new short[118]
    {
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 64,
      (short) 65,
      (short) 71,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 89,
      (short) 90,
      (short) 91,
      (short) 92,
      (short) 93,
      (short) 94,
      (short) 95,
      (short) 96,
      (short) 97,
      (short) 98,
      (short) 99,
      (short) 100,
      (short) 101,
      (short) 81,
      (short) 80,
      (short) 0,
      (short) 69,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 37,
      (short) 0,
      (short) 43,
      (short) 45,
      (short) 0,
      (short) 0,
      (short) 50,
      (short) 54,
      (short) 0,
      (short) 58,
      (short) 0,
      (short) 76,
      (short) 82,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 42,
      (short) 78,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 77,
      (short) 0,
      (short) 0,
      (short) 62,
      (short) 72,
      (short) 73,
      (short) 0,
      (short) 75,
      (short) 63,
      (short) 19,
      (short) 59,
      (short) 0,
      (short) 68,
      (short) 0,
      (short) 0,
      (short) 79,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 39,
      (short) 40,
      (short) 38,
      (short) 44,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 55,
      (short) 56,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 85,
      (short) 83,
      (short) 88,
      (short) 103,
      (short) 0,
      (short) 20,
      (short) 60,
      (short) 0,
      (short) 61,
      (short) 87
    };
    protected static short[] yyDgoto = new short[35]
    {
      (short) 25,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 78,
      (short) 105,
      (short) 26,
      (short) 69,
      (short) 27,
      (short) 28,
      (short) 29,
      (short) 30,
      (short) 31,
      (short) 32,
      (short) 33,
      (short) 34,
      (short) 35,
      (short) 36,
      (short) 37,
      (short) 38,
      (short) 39,
      (short) 40,
      (short) 41,
      (short) 42,
      (short) 79,
      (short) 80,
      (short) 112,
      (short) 43,
      (short) 44,
      (short) 45,
      (short) 83,
      (short) 108
    };
    protected static short[] yySindex = new short[118]
    {
      (short) -254,
      (short) -130,
      (short) -130,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -270,
      (short) -254,
      (short) -254,
      (short) -326,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -266,
      (short) -262,
      (short) -271,
      (short) -256,
      (short) -201,
      (short) -267,
      (short) 0,
      (short) -258,
      (short) 0,
      (short) 0,
      (short) -238,
      (short) -169,
      (short) 0,
      (short) 0,
      (short) -227,
      (short) 0,
      (short) -245,
      (short) 0,
      (short) 0,
      (short) -169,
      (short) -169,
      (short) -254,
      (short) -243,
      (short) 0,
      (short) 0,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -254,
      (short) -189,
      (short) -130,
      (short) -130,
      (short) -254,
      (short) 0,
      (short) -130,
      (short) -130,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -237,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -232,
      (short) 0,
      (short) -224,
      (short) -228,
      (short) 0,
      (short) -262,
      (short) -271,
      (short) -256,
      (short) -256,
      (short) -201,
      (short) -201,
      (short) -201,
      (short) -201,
      (short) -267,
      (short) -267,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -169,
      (short) -169,
      (short) -222,
      (short) 0,
      (short) 0,
      (short) -285,
      (short) -219,
      (short) -220,
      (short) -254,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -218,
      (short) 0,
      (short) 0,
      (short) -224,
      (short) 0,
      (short) 0
    };
    protected static short[] yyRindex = new short[118]
    {
      (short) -176,
      (short) 1,
      (short) -176,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -176,
      (short) -176,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 19,
      (short) 93,
      (short) 37,
      (short) 27,
      (short) 357,
      (short) 276,
      (short) 0,
      (short) 250,
      (short) 0,
      (short) 0,
      (short) 85,
      (short) 114,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 140,
      (short) 169,
      (short) -198,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) -176,
      (short) 0,
      (short) -176,
      (short) -176,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -208,
      (short) 0,
      (short) 0,
      (short) 336,
      (short) 484,
      (short) 458,
      (short) 476,
      (short) 383,
      (short) 393,
      (short) 419,
      (short) 429,
      (short) 302,
      (short) 328,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 195,
      (short) 224,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -206,
      (short) 59,
      (short) 0,
      (short) -176,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -208,
      (short) 0,
      (short) 0
    };
    protected static short[] yyGindex = new short[35]
    {
      (short) -7,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -29,
      (short) 0,
      (short) 20,
      (short) 31,
      (short) 48,
      (short) -33,
      (short) 44,
      (short) 25,
      (short) 0,
      (short) 29,
      (short) 0,
      (short) 0,
      (short) 2,
      (short) 0,
      (short) 66,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) -23
    };
    protected static short[] yyTable = new short[765]
    {
      (short) 49,
      (short) 51,
      (short) 48,
      (short) 46,
      (short) 47,
      (short) 1,
      (short) 2,
      (short) 51,
      (short) 3,
      (short) 4,
      (short) 52,
      (short) 62,
      (short) 53,
      (short) 63,
      (short) 5,
      (short) 6,
      (short) 54,
      (short) 55,
      (short) 7,
      (short) 21,
      (short) 81,
      (short) 66,
      (short) 67,
      (short) 89,
      (short) 90,
      (short) 91,
      (short) 92,
      (short) 26,
      (short) 65,
      (short) 8,
      (short) 84,
      (short) 9,
      (short) 68,
      (short) 50,
      (short) 56,
      (short) 104,
      (short) 57,
      (short) 24,
      (short) 58,
      (short) 59,
      (short) 106,
      (short) 82,
      (short) 10,
      (short) 107,
      (short) 11,
      (short) 109,
      (short) 12,
      (short) 111,
      (short) 13,
      (short) 110,
      (short) 14,
      (short) 68,
      (short) 15,
      (short) 114,
      (short) 16,
      (short) 116,
      (short) 17,
      (short) 72,
      (short) 18,
      (short) 57,
      (short) 19,
      (short) 101,
      (short) 20,
      (short) 64,
      (short) 21,
      (short) 86,
      (short) 22,
      (short) 102,
      (short) 99,
      (short) 100,
      (short) 1,
      (short) 2,
      (short) 85,
      (short) 3,
      (short) 4,
      (short) 84,
      (short) 113,
      (short) 23,
      (short) 24,
      (short) 5,
      (short) 6,
      (short) 60,
      (short) 61,
      (short) 7,
      (short) 86,
      (short) 46,
      (short) 70,
      (short) 95,
      (short) 96,
      (short) 97,
      (short) 70,
      (short) 71,
      (short) 117,
      (short) 22,
      (short) 98,
      (short) 73,
      (short) 9,
      (short) 74,
      (short) 0,
      (short) 75,
      (short) 115,
      (short) 76,
      (short) 87,
      (short) 88,
      (short) 93,
      (short) 94,
      (short) 77,
      (short) 10,
      (short) 70,
      (short) 11,
      (short) 0,
      (short) 12,
      (short) 0,
      (short) 13,
      (short) 49,
      (short) 14,
      (short) 0,
      (short) 15,
      (short) 0,
      (short) 16,
      (short) 0,
      (short) 17,
      (short) 0,
      (short) 18,
      (short) 70,
      (short) 19,
      (short) 70,
      (short) 20,
      (short) 70,
      (short) 21,
      (short) 70,
      (short) 22,
      (short) 3,
      (short) 4,
      (short) 0,
      (short) 70,
      (short) 102,
      (short) 103,
      (short) 5,
      (short) 0,
      (short) 52,
      (short) 0,
      (short) 23,
      (short) 24,
      (short) 0,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 10,
      (short) 0,
      (short) 11,
      (short) 53,
      (short) 12,
      (short) 0,
      (short) 13,
      (short) 0,
      (short) 14,
      (short) 0,
      (short) 15,
      (short) 0,
      (short) 16,
      (short) 0,
      (short) 17,
      (short) 0,
      (short) 18,
      (short) 0,
      (short) 19,
      (short) 0,
      (short) 20,
      (short) 0,
      (short) 21,
      (short) 0,
      (short) 22,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 47,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 51,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 51,
      (short) 0,
      (short) 51,
      (short) 51,
      (short) 34,
      (short) 51,
      (short) 0,
      (short) 51,
      (short) 0,
      (short) 51,
      (short) 0,
      (short) 51,
      (short) 51,
      (short) 70,
      (short) 21,
      (short) 51,
      (short) 51,
      (short) 51,
      (short) 21,
      (short) 51,
      (short) 21,
      (short) 51,
      (short) 26,
      (short) 51,
      (short) 51,
      (short) 0,
      (short) 26,
      (short) 0,
      (short) 26,
      (short) 26,
      (short) 35,
      (short) 26,
      (short) 24,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 24,
      (short) 0,
      (short) 24,
      (short) 24,
      (short) 0,
      (short) 24,
      (short) 26,
      (short) 26,
      (short) 0,
      (short) 0,
      (short) 57,
      (short) 57,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 70,
      (short) 0,
      (short) 70,
      (short) 57,
      (short) 70,
      (short) 36,
      (short) 70,
      (short) 57,
      (short) 51,
      (short) 57,
      (short) 57,
      (short) 70,
      (short) 57,
      (short) 23,
      (short) 57,
      (short) 0,
      (short) 57,
      (short) 0,
      (short) 57,
      (short) 57,
      (short) 0,
      (short) 0,
      (short) 57,
      (short) 57,
      (short) 57,
      (short) 0,
      (short) 57,
      (short) 0,
      (short) 57,
      (short) 46,
      (short) 57,
      (short) 57,
      (short) 0,
      (short) 46,
      (short) 29,
      (short) 46,
      (short) 46,
      (short) 22,
      (short) 46,
      (short) 0,
      (short) 46,
      (short) 22,
      (short) 46,
      (short) 22,
      (short) 46,
      (short) 46,
      (short) 22,
      (short) 0,
      (short) 46,
      (short) 46,
      (short) 46,
      (short) 0,
      (short) 46,
      (short) 0,
      (short) 46,
      (short) 0,
      (short) 46,
      (short) 46,
      (short) 49,
      (short) 0,
      (short) 32,
      (short) 0,
      (short) 49,
      (short) 0,
      (short) 49,
      (short) 49,
      (short) 57,
      (short) 49,
      (short) 0,
      (short) 49,
      (short) 33,
      (short) 49,
      (short) 0,
      (short) 49,
      (short) 49,
      (short) 0,
      (short) 0,
      (short) 49,
      (short) 49,
      (short) 49,
      (short) 0,
      (short) 49,
      (short) 0,
      (short) 49,
      (short) 52,
      (short) 49,
      (short) 49,
      (short) 0,
      (short) 52,
      (short) 0,
      (short) 52,
      (short) 52,
      (short) 46,
      (short) 52,
      (short) 0,
      (short) 52,
      (short) 30,
      (short) 52,
      (short) 0,
      (short) 52,
      (short) 52,
      (short) 0,
      (short) 0,
      (short) 52,
      (short) 52,
      (short) 52,
      (short) 31,
      (short) 52,
      (short) 0,
      (short) 52,
      (short) 0,
      (short) 52,
      (short) 52,
      (short) 53,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 53,
      (short) 0,
      (short) 53,
      (short) 53,
      (short) 49,
      (short) 53,
      (short) 0,
      (short) 53,
      (short) 0,
      (short) 53,
      (short) 0,
      (short) 53,
      (short) 53,
      (short) 0,
      (short) 0,
      (short) 53,
      (short) 53,
      (short) 53,
      (short) 27,
      (short) 53,
      (short) 0,
      (short) 53,
      (short) 47,
      (short) 53,
      (short) 53,
      (short) 0,
      (short) 47,
      (short) 0,
      (short) 47,
      (short) 47,
      (short) 52,
      (short) 47,
      (short) 0,
      (short) 47,
      (short) 0,
      (short) 47,
      (short) 28,
      (short) 47,
      (short) 47,
      (short) 0,
      (short) 0,
      (short) 47,
      (short) 47,
      (short) 47,
      (short) 25,
      (short) 47,
      (short) 0,
      (short) 47,
      (short) 0,
      (short) 47,
      (short) 47,
      (short) 48,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 48,
      (short) 53,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 48,
      (short) 0,
      (short) 0,
      (short) 48,
      (short) 48,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 48,
      (short) 41,
      (short) 48,
      (short) 48,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 41,
      (short) 47,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 41,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 41,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 41,
      (short) 34,
      (short) 41,
      (short) 41,
      (short) 0,
      (short) 34,
      (short) 0,
      (short) 34,
      (short) 34,
      (short) 0,
      (short) 34,
      (short) 0,
      (short) 48,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 34,
      (short) 34,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 34,
      (short) 34,
      (short) 0,
      (short) 34,
      (short) 0,
      (short) 34,
      (short) 35,
      (short) 34,
      (short) 34,
      (short) 0,
      (short) 35,
      (short) 0,
      (short) 35,
      (short) 35,
      (short) 0,
      (short) 35,
      (short) 0,
      (short) 41,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 35,
      (short) 35,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 35,
      (short) 35,
      (short) 0,
      (short) 35,
      (short) 0,
      (short) 35,
      (short) 36,
      (short) 35,
      (short) 35,
      (short) 0,
      (short) 36,
      (short) 0,
      (short) 36,
      (short) 36,
      (short) 23,
      (short) 36,
      (short) 0,
      (short) 0,
      (short) 23,
      (short) 0,
      (short) 23,
      (short) 36,
      (short) 36,
      (short) 23,
      (short) 0,
      (short) 0,
      (short) 36,
      (short) 36,
      (short) 0,
      (short) 36,
      (short) 0,
      (short) 36,
      (short) 0,
      (short) 36,
      (short) 36,
      (short) 29,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 29,
      (short) 0,
      (short) 29,
      (short) 29,
      (short) 0,
      (short) 29,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 29,
      (short) 29,
      (short) 0,
      (short) 29,
      (short) 0,
      (short) 29,
      (short) 32,
      (short) 29,
      (short) 29,
      (short) 0,
      (short) 32,
      (short) 0,
      (short) 32,
      (short) 32,
      (short) 0,
      (short) 32,
      (short) 33,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 33,
      (short) 0,
      (short) 33,
      (short) 33,
      (short) 0,
      (short) 33,
      (short) 32,
      (short) 32,
      (short) 0,
      (short) 32,
      (short) 0,
      (short) 32,
      (short) 0,
      (short) 32,
      (short) 32,
      (short) 0,
      (short) 33,
      (short) 33,
      (short) 0,
      (short) 33,
      (short) 0,
      (short) 33,
      (short) 30,
      (short) 33,
      (short) 33,
      (short) 0,
      (short) 30,
      (short) 0,
      (short) 30,
      (short) 30,
      (short) 0,
      (short) 30,
      (short) 31,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 31,
      (short) 0,
      (short) 31,
      (short) 31,
      (short) 0,
      (short) 31,
      (short) 30,
      (short) 30,
      (short) 0,
      (short) 30,
      (short) 0,
      (short) 30,
      (short) 0,
      (short) 30,
      (short) 30,
      (short) 0,
      (short) 31,
      (short) 31,
      (short) 0,
      (short) 31,
      (short) 0,
      (short) 31,
      (short) 0,
      (short) 31,
      (short) 31,
      (short) 27,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 27,
      (short) 0,
      (short) 27,
      (short) 27,
      (short) 0,
      (short) 27,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 0,
      (short) 28,
      (short) 0,
      (short) 27,
      (short) 27,
      (short) 28,
      (short) 0,
      (short) 28,
      (short) 28,
      (short) 25,
      (short) 28,
      (short) 0,
      (short) 0,
      (short) 25,
      (short) 0,
      (short) 25,
      (short) 25,
      (short) 0,
      (short) 25,
      (short) 0,
      (short) 0,
      (short) 28,
      (short) 28
    };
    protected static short[] yyCheck = new short[765]
    {
      (short) 7,
      (short) 0,
      (short) 272,
      (short) 1,
      (short) 2,
      (short) 259,
      (short) 260,
      (short) 333,
      (short) 262,
      (short) 263,
      (short) 276,
      (short) 278,
      (short) 274,
      (short) 280,
      (short) 268,
      (short) 269,
      (short) 287,
      (short) 288,
      (short) 272,
      (short) 0,
      (short) 265,
      (short) 259,
      (short) 260,
      (short) 56,
      (short) 57,
      (short) 58,
      (short) 59,
      (short) 0,
      (short) 286,
      (short) 283,
      (short) 273,
      (short) 285,
      (short) 270,
      (short) 8,
      (short) 290,
      (short) 272,
      (short) 292,
      (short) 0,
      (short) 294,
      (short) 295,
      (short) 272,
      (short) 48,
      (short) 296,
      (short) 267,
      (short) 298,
      (short) 273,
      (short) 300,
      (short) 332,
      (short) 302,
      (short) 271,
      (short) 304,
      (short) 270,
      (short) 306,
      (short) 273,
      (short) 308,
      (short) 273,
      (short) 310,
      (short) 284,
      (short) 312,
      (short) 0,
      (short) 314,
      (short) 68,
      (short) 316,
      (short) 330,
      (short) 318,
      (short) 273,
      (short) 320,
      (short) 273,
      (short) 66,
      (short) 67,
      (short) 259,
      (short) 260,
      (short) 52,
      (short) 262,
      (short) 263,
      (short) 273,
      (short) 105,
      (short) 331,
      (short) 332,
      (short) 268,
      (short) 269,
      (short) 282,
      (short) 283,
      (short) 272,
      (short) 53,
      (short) 0,
      (short) 284,
      (short) 62,
      (short) 63,
      (short) 64,
      (short) 259,
      (short) 260,
      (short) 115,
      (short) 0,
      (short) 65,
      (short) 322,
      (short) 285,
      (short) 324,
      (short) -1,
      (short) 326,
      (short) 107,
      (short) 328,
      (short) 54,
      (short) 55,
      (short) 60,
      (short) 61,
      (short) 333,
      (short) 296,
      (short) 284,
      (short) 298,
      (short) -1,
      (short) 300,
      (short) -1,
      (short) 302,
      (short) 0,
      (short) 304,
      (short) -1,
      (short) 306,
      (short) -1,
      (short) 308,
      (short) -1,
      (short) 310,
      (short) -1,
      (short) 312,
      (short) 322,
      (short) 314,
      (short) 324,
      (short) 316,
      (short) 326,
      (short) 318,
      (short) 328,
      (short) 320,
      (short) 262,
      (short) 263,
      (short) -1,
      (short) 333,
      (short) 70,
      (short) 71,
      (short) 268,
      (short) -1,
      (short) 0,
      (short) -1,
      (short) 331,
      (short) 332,
      (short) -1,
      (short) -1,
      (short) 322,
      (short) -1,
      (short) 324,
      (short) -1,
      (short) 326,
      (short) -1,
      (short) 328,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 333,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 296,
      (short) -1,
      (short) 298,
      (short) 0,
      (short) 300,
      (short) -1,
      (short) 302,
      (short) -1,
      (short) 304,
      (short) -1,
      (short) 306,
      (short) -1,
      (short) 308,
      (short) -1,
      (short) 310,
      (short) -1,
      (short) 312,
      (short) -1,
      (short) 314,
      (short) -1,
      (short) 316,
      (short) -1,
      (short) 318,
      (short) -1,
      (short) 320,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 0,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 0,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 0,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 0,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) 284,
      (short) 267,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) 271,
      (short) 290,
      (short) 273,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 0,
      (short) 276,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) -1,
      (short) 259,
      (short) 260,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 322,
      (short) -1,
      (short) 324,
      (short) 267,
      (short) 326,
      (short) 0,
      (short) 328,
      (short) 271,
      (short) 330,
      (short) 273,
      (short) 274,
      (short) 333,
      (short) 276,
      (short) 0,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) 0,
      (short) 273,
      (short) 274,
      (short) 267,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) 271,
      (short) 280,
      (short) 273,
      (short) 282,
      (short) 283,
      (short) 276,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) 267,
      (short) -1,
      (short) 0,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) 0,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) 0,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) 0,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) 0,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) 0,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) 0,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) 286,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 330,
      (short) 276,
      (short) -1,
      (short) 278,
      (short) -1,
      (short) 280,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) -1,
      (short) 330,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) -1,
      (short) 330,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 282,
      (short) 283,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 267,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 282,
      (short) 283,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) 267,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) -1,
      (short) 290,
      (short) -1,
      (short) 292,
      (short) -1,
      (short) 294,
      (short) 295,
      (short) 267,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) -1,
      (short) 267,
      (short) -1,
      (short) 287,
      (short) 288,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) 267,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) 271,
      (short) -1,
      (short) 273,
      (short) 274,
      (short) -1,
      (short) 276,
      (short) -1,
      (short) -1,
      (short) 287,
      (short) 288
    };

    public XPathParser()
      : this((IStaticXsltContext) null)
    {
    }

    internal XPathParser(IStaticXsltContext context)
    {
      this.Context = context;
      this.ErrorOutput = TextWriter.Null;
    }

    internal Expression Compile(string xpath)
    {
      try
      {
        return (Expression) this.yyparse((yyInput) new Tokenizer(xpath));
      }
      catch (XPathException ex)
      {
        throw;
      }
      catch (Exception ex)
      {
        throw new XPathException("Error during parse of " + xpath, ex);
      }
    }

    private NodeSet CreateNodeTest(Axes axis, object nodeTest, ArrayList plist)
    {
      NodeSet expr = (NodeSet) this.CreateNodeTest(axis, nodeTest);
      if (plist != null)
      {
        for (int index = 0; index < plist.Count; ++index)
          expr = (NodeSet) new ExprFilter((Expression) expr, (Expression) plist[index]);
      }
      return expr;
    }

    private NodeTest CreateNodeTest(Axes axis, object test)
    {
      switch (test)
      {
        case XPathNodeType _:
          return (NodeTest) new NodeTypeTest(axis, (XPathNodeType) test, (string) null);
        case string _:
        case null:
          return (NodeTest) new NodeTypeTest(axis, XPathNodeType.ProcessingInstruction, (string) test);
        default:
          XmlQualifiedName name = (XmlQualifiedName) test;
          return name == XmlQualifiedName.Empty ? (NodeTest) new NodeTypeTest(axis) : (NodeTest) new NodeNameTest(axis, name, this.Context);
      }
    }

    public void yyerror(string message) => this.yyerror(message, (string[]) null);

    public void yyerror(string message, string[] expected)
    {
      if (XPathParser.yacc_verbose_flag > 0 && expected != null && expected.Length > 0)
      {
        this.ErrorOutput.Write(message + ", expecting");
        for (int index = 0; index < expected.Length; ++index)
          this.ErrorOutput.Write(" " + expected[index]);
        this.ErrorOutput.WriteLine();
      }
      else
        this.ErrorOutput.WriteLine(message);
    }

    public static string yyname(int token)
    {
      if (token < 0 || token > XPathParser.yyNames.Length)
        return "[illegal]";
      string yyName;
      return (yyName = XPathParser.yyNames[token]) != null ? yyName : "[unknown]";
    }

    protected int[] yyExpectingTokens(int state)
    {
      int length = 0;
      bool[] flagArray = new bool[XPathParser.yyNames.Length];
      int num1;
      if ((num1 = (int) XPathParser.yySindex[state]) != 0)
      {
        for (int index = num1 >= 0 ? 0 : -num1; index < XPathParser.yyNames.Length && num1 + index < XPathParser.yyTable.Length; ++index)
        {
          if ((int) XPathParser.yyCheck[num1 + index] == index && !flagArray[index] && XPathParser.yyNames[index] != null)
          {
            ++length;
            flagArray[index] = true;
          }
        }
      }
      int num2;
      if ((num2 = (int) XPathParser.yyRindex[state]) != 0)
      {
        for (int index = num2 >= 0 ? 0 : -num2; index < XPathParser.yyNames.Length && num2 + index < XPathParser.yyTable.Length; ++index)
        {
          if ((int) XPathParser.yyCheck[num2 + index] == index && !flagArray[index] && XPathParser.yyNames[index] != null)
          {
            ++length;
            flagArray[index] = true;
          }
        }
      }
      int[] numArray = new int[length];
      int index1;
      int num3 = index1 = 0;
      while (num3 < length)
      {
        if (flagArray[index1])
          numArray[num3++] = index1;
        ++index1;
      }
      return numArray;
    }

    protected string[] yyExpecting(int state)
    {
      int[] numArray = this.yyExpectingTokens(state);
      string[] strArray1 = new string[numArray.Length];
      int index1;
      for (int index2 = 0; index2 < numArray.Length; index2 = index1 + 1)
      {
        string[] strArray2 = strArray1;
        int index3 = index2;
        index1 = index3 + 1;
        string yyName = XPathParser.yyNames[numArray[index1]];
        strArray2[index3] = yyName;
      }
      return strArray1;
    }

    internal object yyparse(yyInput yyLex, object yyd)
    {
      this.debug = (yyDebug) yyd;
      return this.yyparse(yyLex);
    }

    protected object yyDefault(object first) => first;

    internal object yyparse(yyInput yyLex)
    {
      if (this.yyMax <= 0)
        this.yyMax = 256;
      int index1 = 0;
      int[] numArray1 = new int[this.yyMax];
      object obj = (object) null;
      object[] objArray1 = new object[this.yyMax];
      int token = -1;
      int num1 = 0;
      int index2 = 0;
      XmlQualifiedName name;
      XmlQualifiedName nm;
      while (true)
      {
        if (index2 >= numArray1.Length)
        {
          int[] numArray2 = new int[numArray1.Length + this.yyMax];
          numArray1.CopyTo((Array) numArray2, 0);
          numArray1 = numArray2;
          object[] objArray2 = new object[objArray1.Length + this.yyMax];
          objArray1.CopyTo((Array) objArray2, 0);
          objArray1 = objArray2;
        }
        numArray1[index2] = index1;
        objArray1[index2] = obj;
        if (this.debug != null)
          this.debug.push(index1, obj);
        int index3;
        while ((index3 = (int) XPathParser.yyDefRed[index1]) == 0)
        {
          if (token < 0)
          {
            token = !yyLex.advance() ? 0 : yyLex.token();
            if (this.debug != null)
              this.debug.lex(index1, token, XPathParser.yyname(token), yyLex.value());
          }
          int num2;
          int index4;
          if ((num2 = (int) XPathParser.yySindex[index1]) != 0 && (index4 = num2 + token) >= 0 && index4 < XPathParser.yyTable.Length && (int) XPathParser.yyCheck[index4] == token)
          {
            if (this.debug != null)
              this.debug.shift(index1, (int) XPathParser.yyTable[index4], num1 - 1);
            index1 = (int) XPathParser.yyTable[index4];
            obj = yyLex.value();
            token = -1;
            if (num1 > 0)
            {
              --num1;
              goto label_142;
            }
            else
              goto label_142;
          }
          else
          {
            if ((index3 = (int) XPathParser.yyRindex[index1]) != 0 && (index3 += token) >= 0 && index3 < XPathParser.yyTable.Length && (int) XPathParser.yyCheck[index3] == token)
            {
              index3 = (int) XPathParser.yyTable[index3];
              break;
            }
            switch (num1)
            {
              case 0:
                this.yyExpectingState = index1;
                if (this.debug != null)
                  this.debug.error("syntax error");
                if (token == 0 || token == this.eof_token)
                  throw new yyUnexpectedEof();
                goto case 1;
              case 1:
              case 2:
                num1 = 3;
                int num3;
                int index5;
                while ((num3 = (int) XPathParser.yySindex[numArray1[index2]]) == 0 || (index5 = num3 + 256) < 0 || index5 >= XPathParser.yyTable.Length || XPathParser.yyCheck[index5] != (short) 256)
                {
                  if (this.debug != null)
                    this.debug.pop(numArray1[index2]);
                  if (--index2 < 0)
                  {
                    if (this.debug != null)
                      this.debug.reject();
                    throw new yyException("irrecoverable syntax error");
                  }
                }
                if (this.debug != null)
                  this.debug.shift(numArray1[index2], (int) XPathParser.yyTable[index5], 3);
                index1 = (int) XPathParser.yyTable[index5];
                obj = yyLex.value();
                goto label_142;
              case 3:
                if (token == 0)
                {
                  if (this.debug != null)
                    this.debug.reject();
                  throw new yyException("irrecoverable syntax error at end-of-file");
                }
                if (this.debug != null)
                  this.debug.discard(index1, token, XPathParser.yyname(token), yyLex.value());
                token = -1;
                continue;
              default:
                goto label_41;
            }
          }
        }
label_41:
        int index6 = index2 + 1 - (int) XPathParser.yyLen[index3];
        if (this.debug != null)
          this.debug.reduce(index1, numArray1[index6 - 1], index3, XPathParser.YYRules.getRule(index3), (int) XPathParser.yyLen[index3]);
        obj = this.yyDefault(index6 <= index2 ? objArray1[index6] : (object) null);
        switch (index3)
        {
          case 2:
            obj = (object) new ExprUNION((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 3:
            obj = (object) new ExprRoot();
            break;
          case 4:
            obj = (object) new ExprSLASH((Expression) new ExprRoot(), (NodeSet) objArray1[0 + index2]);
            break;
          case 6:
            obj = (object) new ExprSLASH((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 7:
            obj = (object) new ExprSLASH2((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 8:
            obj = (object) new ExprSLASH2((Expression) new ExprRoot(), (NodeSet) objArray1[0 + index2]);
            break;
          case 10:
            name = (XmlQualifiedName) objArray1[index2 - 3];
            if (!(name.Name != "id") && !(name.Namespace != string.Empty))
            {
              obj = (object) ExprFunctionCall.Factory(name, new FunctionArguments((Expression) new ExprLiteral((string) objArray1[index2 - 1]), (FunctionArguments) null), this.Context);
              break;
            }
            goto label_51;
          case 11:
            nm = (XmlQualifiedName) objArray1[index2 - 5];
            if (!(nm.Name != "key") && !(nm.Namespace != string.Empty))
            {
              obj = (object) this.Context.TryGetFunction(nm, new FunctionArguments((Expression) new ExprLiteral((string) objArray1[index2 - 3]), new FunctionArguments((Expression) new ExprLiteral((string) objArray1[index2 - 1]), (FunctionArguments) null)));
              break;
            }
            goto label_54;
          case 13:
            obj = (object) new ExprSLASH((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 14:
            obj = (object) new ExprSLASH2((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 15:
            obj = (object) this.CreateNodeTest((Axes) objArray1[index2 - 2], objArray1[index2 - 1], (ArrayList) objArray1[0 + index2]);
            break;
          case 17:
            obj = (object) Axes.Child;
            break;
          case 18:
            obj = (object) Axes.Attribute;
            break;
          case 19:
            obj = (object) null;
            break;
          case 20:
            ArrayList arrayList1 = (ArrayList) objArray1[index2 - 1] ?? new ArrayList();
            arrayList1.Add((object) (Expression) objArray1[0 + index2]);
            obj = (object) arrayList1;
            break;
          case 23:
            obj = (object) new ExprOR((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 25:
            obj = (object) new ExprAND((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 27:
            obj = (object) new ExprEQ((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 28:
            obj = (object) new ExprNE((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 30:
            obj = (object) new ExprLT((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 31:
            obj = (object) new ExprGT((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 32:
            obj = (object) new ExprLE((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 33:
            obj = (object) new ExprGE((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 35:
            obj = (object) new ExprPLUS((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 36:
            obj = (object) new ExprMINUS((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 38:
            obj = (object) new ExprMULT((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 39:
            obj = (object) new ExprDIV((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 40:
            obj = (object) new ExprMOD((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 42:
            obj = (object) new ExprNEG((Expression) objArray1[0 + index2]);
            break;
          case 44:
            obj = (object) new ExprUNION((Expression) objArray1[index2 - 2], (Expression) objArray1[0 + index2]);
            break;
          case 47:
            obj = (object) new ExprSLASH((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 48:
            obj = (object) new ExprSLASH2((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 51:
            obj = (object) new ExprRoot();
            break;
          case 52:
            obj = (object) new ExprSLASH((Expression) new ExprRoot(), (NodeSet) objArray1[0 + index2]);
            break;
          case 53:
            obj = (object) new ExprSLASH2((Expression) new ExprRoot(), (NodeSet) objArray1[0 + index2]);
            break;
          case 55:
            obj = (object) new ExprSLASH((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 56:
            obj = (object) new ExprSLASH2((Expression) objArray1[index2 - 2], (NodeSet) objArray1[0 + index2]);
            break;
          case 57:
            obj = (object) this.CreateNodeTest((Axes) objArray1[index2 - 2], objArray1[index2 - 1], (ArrayList) objArray1[0 + index2]);
            break;
          case 60:
            obj = (object) (XPathNodeType) objArray1[index2 - 2];
            break;
          case 61:
            obj = (object) (string) objArray1[index2 - 1];
            break;
          case 62:
            obj = (object) XmlQualifiedName.Empty;
            break;
          case 64:
            obj = (object) new NodeTypeTest(Axes.Self, XPathNodeType.All);
            break;
          case 65:
            obj = (object) new NodeTypeTest(Axes.Parent, XPathNodeType.All);
            break;
          case 66:
            obj = (object) null;
            break;
          case 67:
            ArrayList arrayList2 = (ArrayList) objArray1[index2 - 1] ?? new ArrayList();
            arrayList2.Add(objArray1[0 + index2]);
            obj = (object) arrayList2;
            break;
          case 68:
            obj = objArray1[index2 - 1];
            break;
          case 70:
            obj = (object) Axes.Child;
            break;
          case 71:
            obj = (object) Axes.Attribute;
            break;
          case 72:
            obj = (object) XPathNodeType.Comment;
            break;
          case 73:
            obj = (object) XPathNodeType.Text;
            break;
          case 74:
            obj = (object) XPathNodeType.ProcessingInstruction;
            break;
          case 75:
            obj = (object) XPathNodeType.All;
            break;
          case 77:
            obj = (object) new ExprFilter((Expression) objArray1[index2 - 1], (Expression) objArray1[0 + index2]);
            break;
          case 78:
            Expression expression1 = (Expression) null;
            if (this.Context != null)
              expression1 = this.Context.TryGetVariable(((XmlQualifiedName) objArray1[0 + index2]).ToString());
            if (expression1 == null)
              expression1 = (Expression) new ExprVariable((XmlQualifiedName) objArray1[0 + index2], this.Context);
            obj = (object) expression1;
            break;
          case 79:
            obj = (object) new ExprParens((Expression) objArray1[index2 - 1]);
            break;
          case 80:
            obj = (object) new ExprLiteral((string) objArray1[0 + index2]);
            break;
          case 81:
            obj = (object) new ExprNumber((double) objArray1[0 + index2]);
            break;
          case 83:
            Expression expression2 = (Expression) null;
            if (this.Context != null)
              expression2 = this.Context.TryGetFunction((XmlQualifiedName) objArray1[index2 - 3], (FunctionArguments) objArray1[index2 - 1]);
            if (expression2 == null)
              expression2 = ExprFunctionCall.Factory((XmlQualifiedName) objArray1[index2 - 3], (FunctionArguments) objArray1[index2 - 1], this.Context);
            obj = (object) expression2;
            break;
          case 85:
            obj = (object) new FunctionArguments((Expression) objArray1[index2 - 1], (FunctionArguments) objArray1[0 + index2]);
            break;
          case 87:
            obj = (object) new FunctionArguments((Expression) objArray1[index2 - 1], (FunctionArguments) objArray1[0 + index2]);
            break;
          case 88:
            obj = objArray1[index2 - 1];
            break;
          case 89:
            obj = (object) Axes.Ancestor;
            break;
          case 90:
            obj = (object) Axes.AncestorOrSelf;
            break;
          case 91:
            obj = (object) Axes.Attribute;
            break;
          case 92:
            obj = (object) Axes.Child;
            break;
          case 93:
            obj = (object) Axes.Descendant;
            break;
          case 94:
            obj = (object) Axes.DescendantOrSelf;
            break;
          case 95:
            obj = (object) Axes.Following;
            break;
          case 96:
            obj = (object) Axes.FollowingSibling;
            break;
          case 97:
            obj = (object) Axes.Namespace;
            break;
          case 98:
            obj = (object) Axes.Parent;
            break;
          case 99:
            obj = (object) Axes.Preceding;
            break;
          case 100:
            obj = (object) Axes.PrecedingSibling;
            break;
          case 101:
            obj = (object) Axes.Self;
            break;
        }
        index2 -= (int) XPathParser.yyLen[index3];
        int num4 = numArray1[index2];
        int yyLh = (int) XPathParser.yyLhs[index3];
        if (num4 == 0 && yyLh == 0)
        {
          if (this.debug != null)
            this.debug.shift(0, XPathParser.yyFinal);
          index1 = XPathParser.yyFinal;
          if (token < 0)
          {
            token = !yyLex.advance() ? 0 : yyLex.token();
            if (this.debug != null)
              this.debug.lex(index1, token, XPathParser.yyname(token), yyLex.value());
          }
          if (token == 0)
            goto label_137;
        }
        else
        {
          int num5;
          int index7;
          index1 = (num5 = (int) XPathParser.yyGindex[yyLh]) == 0 || (index7 = num5 + num4) < 0 || index7 >= XPathParser.yyTable.Length || (int) XPathParser.yyCheck[index7] != num4 ? (int) XPathParser.yyDgoto[yyLh] : (int) XPathParser.yyTable[index7];
          if (this.debug != null)
            this.debug.shift(numArray1[index2], index1);
        }
label_142:
        ++index2;
      }
label_51:
      throw new XPathException(string.Format("Expected 'id' but got '{0}'", (object) name));
label_54:
      throw new XPathException(string.Format("Expected 'key' but got '{0}'", (object) nm));
label_137:
      if (this.debug != null)
        this.debug.accept(obj);
      return obj;
    }

    private class YYRules : MarshalByRefObject
    {
      public static string[] yyRule = new string[104]
      {
        "$accept : Expr",
        "Pattern : LocationPathPattern",
        "Pattern : Pattern BAR LocationPathPattern",
        "LocationPathPattern : SLASH",
        "LocationPathPattern : SLASH RelativePathPattern",
        "LocationPathPattern : IdKeyPattern",
        "LocationPathPattern : IdKeyPattern SLASH RelativePathPattern",
        "LocationPathPattern : IdKeyPattern SLASH2 RelativePathPattern",
        "LocationPathPattern : SLASH2 RelativePathPattern",
        "LocationPathPattern : RelativePathPattern",
        "IdKeyPattern : FUNCTION_NAME PAREN_OPEN LITERAL PAREN_CLOSE",
        "IdKeyPattern : FUNCTION_NAME PAREN_OPEN LITERAL COMMA LITERAL PAREN_CLOSE",
        "RelativePathPattern : StepPattern",
        "RelativePathPattern : RelativePathPattern SLASH StepPattern",
        "RelativePathPattern : RelativePathPattern SLASH2 StepPattern",
        "StepPattern : ChildOrAttributeAxisSpecifier NodeTest Predicates",
        "ChildOrAttributeAxisSpecifier : AbbreviatedAxisSpecifier",
        "ChildOrAttributeAxisSpecifier : CHILD COLON2",
        "ChildOrAttributeAxisSpecifier : ATTRIBUTE COLON2",
        "Predicates :",
        "Predicates : Predicates Predicate",
        "Expr : OrExpr",
        "OrExpr : AndExpr",
        "OrExpr : OrExpr OR AndExpr",
        "AndExpr : EqualityExpr",
        "AndExpr : AndExpr AND EqualityExpr",
        "EqualityExpr : RelationalExpr",
        "EqualityExpr : EqualityExpr EQ RelationalExpr",
        "EqualityExpr : EqualityExpr NE RelationalExpr",
        "RelationalExpr : AdditiveExpr",
        "RelationalExpr : RelationalExpr LT AdditiveExpr",
        "RelationalExpr : RelationalExpr GT AdditiveExpr",
        "RelationalExpr : RelationalExpr LE AdditiveExpr",
        "RelationalExpr : RelationalExpr GE AdditiveExpr",
        "AdditiveExpr : MultiplicativeExpr",
        "AdditiveExpr : AdditiveExpr PLUS MultiplicativeExpr",
        "AdditiveExpr : AdditiveExpr MINUS MultiplicativeExpr",
        "MultiplicativeExpr : UnaryExpr",
        "MultiplicativeExpr : MultiplicativeExpr MULTIPLY UnaryExpr",
        "MultiplicativeExpr : MultiplicativeExpr DIV UnaryExpr",
        "MultiplicativeExpr : MultiplicativeExpr MOD UnaryExpr",
        "UnaryExpr : UnionExpr",
        "UnaryExpr : MINUS UnaryExpr",
        "UnionExpr : PathExpr",
        "UnionExpr : UnionExpr BAR PathExpr",
        "PathExpr : LocationPath",
        "PathExpr : FilterExpr",
        "PathExpr : FilterExpr SLASH RelativeLocationPath",
        "PathExpr : FilterExpr SLASH2 RelativeLocationPath",
        "LocationPath : RelativeLocationPath",
        "LocationPath : AbsoluteLocationPath",
        "AbsoluteLocationPath : SLASH",
        "AbsoluteLocationPath : SLASH RelativeLocationPath",
        "AbsoluteLocationPath : SLASH2 RelativeLocationPath",
        "RelativeLocationPath : Step",
        "RelativeLocationPath : RelativeLocationPath SLASH Step",
        "RelativeLocationPath : RelativeLocationPath SLASH2 Step",
        "Step : AxisSpecifier NodeTest Predicates",
        "Step : AbbreviatedStep",
        "NodeTest : NameTest",
        "NodeTest : NodeType PAREN_OPEN PAREN_CLOSE",
        "NodeTest : PROCESSING_INSTRUCTION PAREN_OPEN OptionalLiteral PAREN_CLOSE",
        "NameTest : ASTERISK",
        "NameTest : QName",
        "AbbreviatedStep : DOT",
        "AbbreviatedStep : DOT2",
        "Predicates :",
        "Predicates : Predicates Predicate",
        "AxisSpecifier : AxisName COLON2",
        "AxisSpecifier : AbbreviatedAxisSpecifier",
        "AbbreviatedAxisSpecifier :",
        "AbbreviatedAxisSpecifier : AT",
        "NodeType : COMMENT",
        "NodeType : TEXT",
        "NodeType : PROCESSING_INSTRUCTION",
        "NodeType : NODE",
        "FilterExpr : PrimaryExpr",
        "FilterExpr : FilterExpr Predicate",
        "PrimaryExpr : DOLLAR QName",
        "PrimaryExpr : PAREN_OPEN Expr PAREN_CLOSE",
        "PrimaryExpr : LITERAL",
        "PrimaryExpr : NUMBER",
        "PrimaryExpr : FunctionCall",
        "FunctionCall : FUNCTION_NAME PAREN_OPEN OptionalArgumentList PAREN_CLOSE",
        "OptionalArgumentList :",
        "OptionalArgumentList : Expr OptionalArgumentListTail",
        "OptionalArgumentListTail :",
        "OptionalArgumentListTail : COMMA Expr OptionalArgumentListTail",
        "Predicate : BRACKET_OPEN Expr BRACKET_CLOSE",
        "AxisName : ANCESTOR",
        "AxisName : ANCESTOR_OR_SELF",
        "AxisName : ATTRIBUTE",
        "AxisName : CHILD",
        "AxisName : DESCENDANT",
        "AxisName : DESCENDANT_OR_SELF",
        "AxisName : FOLLOWING",
        "AxisName : FOLLOWING_SIBLING",
        "AxisName : NAMESPACE",
        "AxisName : PARENT",
        "AxisName : PRECEDING",
        "AxisName : PRECEDING_SIBLING",
        "AxisName : SELF",
        "OptionalLiteral :",
        "OptionalLiteral : LITERAL"
      };

      public static string getRule(int index) => XPathParser.YYRules.yyRule[index];
    }
  }
}
